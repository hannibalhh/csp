-- Spezifikation Schrankensystem mit Pruefungen
-- Übung TH2, WS 11/12

----------
--Datentypen 
---------- 

 nametype ZId = {0,1,2,3}  
 nametype SegId = {"l1","l2","r1","r2"} -- links 1 und 2, rechts 1 und 2  
nametype SigStates = {"r", "g"} -- Signalzustand rot, grün 
 nametype SegState = {"unten", "oben", "senken", "heben" }-- Segmentzustand 
 channel zug_kommt, zug_rein, zug_raus: ZId
 channel df_anfrage, df_freigabe: ZId  -- Durchfahrt Anfrage und Freigabe 
 --channel seg_senken, seg_heben, seg_unten, seg_oben:Seq(SegId)
 channel seg_senken, seg_heben, seg_unten, seg_oben: {<"l1","l2">, <"r1","r2">, <"l1","l2","r1","r2">}

 channel get_signal, set_signal: SigStates

-- liste mit wartenden zügen
channel add, get : ZId 
ZUG_LIST(<>) = add?d -> ZUG_LIST (<d>)
ZUG_LIST(<h>^s) =
	get!h -> ZUG_LIST(s)
	[]
	add?d -> ZUG_LIST(<d>^<h>^s)

------------
--Basisprozesse
------------ 
-- TODO: gleichzeitigkeit hinzufügen (listen)
SEGMENT  = 	seg_senken?s -> seg_unten!s -> SKIP
		[]  
	      	seg_heben?s -> seg_oben!s -> SKIP

STEUER  = 	 df_anfrage?i   ->  seg_senken!<"r1","r2"> ->
		seg_unten?<"r1","r2"> 
		-> seg_senken!<"l1","l2"> -> seg_unten!<"l1","l2"> ->
		set_signal!"g" -> df_freigabe!i
		->
		zug_rein?i -> set_signal!"r" -> zug_raus?i ->
		seg_heben!<"l1","l2"> ->
		 STEUER

SIGNAL (s) = 	get_signal!s -> SIGNAL(s) 
	     	[]
		set_signal?x -> SIGNAL(x)  

ZUG2(i) =  get_signal?s -> 
	((s=="r") & ZUG2(i)
	[]
	(s=="g") & df_freigabe?i -> zug_rein!i -> zug_raus!i -> ZUG )


ZUG  = zug_kommt?i -> df_anfrage?i -> ZUG2(i)

------------
--Gesamtsystem
------------ 
SYS= |~| i:ZId @ zug_kommt!i -> ZUG ; (SIGNAL("r") [| {|get_signal, set_signal|} |]   
	STEUER) [| {|seg_senken, seg_heben, seg_unten, seg_oben |}  |] SEGMENT


------------
--Prüfungen
------------ 

-- Zug fährt nur wenn alle Schranken unten sind


-- Kein Zug ist dauerhaft blockiert
assert SYS :[deadlock free [F]]
assert ZUG :[deadlock free [F]]



---------------------------------------------------------------
--
--  Konkurrierender Zugriff auf gemeinsamen Speicher
--  fuer das Reader/Writer-Problem:
--  Implementierung mit Ringpuffer-Technik
--
--  jp 11NOV2001
---------------------------------------------------------------

--------------------------------------------------------------
-- Darstellung erfolgt TOP-DOWN --- zunaechst das
-- ABSTRAKTE SYSTEM 'ASYS', welches spaeter durch das KONKRETE SYSTEM
-- 'CSYS' verfeinert werden soll
--------------------------------------------------------------

ASYS = (READ_ABS ||| WRITE_ABS)
       [| {| rd,wr |} |]
       BUF


---------------------------------------------------------------
-- Abstrakte Spezifikation:
-- Ein FiFo-Puffer mit Kapazitaet max
---------------------------------------------------------------


DATA = { 0..2 }     

max = 2

-- Fehler 1: Falscher Datentyp: simple channel
-- Indikator: B(s) verursacht einen Compileerror: Couldn't match expected type
-- Behebung: added Type DATA to declaration
channel rd : DATA -- zum Lesen aus dem Puffer -- Fehler 1a:
channel wr : DATA -- zum Schreiben in den Puffer -- Fehler 1b:

-- In CSP koennen Sequenzen als Datenstrukturen
-- in Prozessparametern verwendet werden:
-- <e1,...,en>. <> ist die leere Sequenz.
-- s^u ist die Konkatenation von s und u
-- head(s) und tail(s) definiert wie gewohnt.
-- #s ist die Laenge der Sequenz.

BUF =  B(<>)

B(s) = (#s > 0) & rd!head(s) -> B(tail(s)) -- hier zeigt sich der Fehler mit "alle auspraegungen "
        []
       (#s < max) & wr?x -> B(s^<x>)  --  



-----------------------------------------------------------------
-- Abstrakte Spezifikation des Readers
-----------------------------------------------------------------

channel process_rd  -- abstraktes Ereignis: verarbeite die gelesenen Daten


-- READ_ABS = rd?x -> process_rd -> READ_ABS
-- Fehler 2: process_rd ergibt keinen Sinn
-- Indikator: assert SYS_CON_H [T= ASYS schlägt auf Grund des process_rd fehlt
-- Behebung: Entfernen von process_rd
READ_ABS = rd?x -> READ_ABS 			-- Fehler 2: process_rd macht kein sinn und wird nirgendwo genutzt


-----------------------------------------------------------------
-- Abstrakte Spezifikation des Writers:
-----------------------------------------------------------------

-- Writer produziert nicht-deterministisch irgendein x aus DATA
-- |~| ist die nicht-deterministische Auswahl (internal choice)
WRITE_ABS = (|~| x:DATA @ WRABS(x))

WRABS(x)  = wr!x -> WRITE_ABS



-----------------------------------------------------------------
-----------------------------------------------------------------
--  KONKRETES SYSTEM CSYS
-----------------------------------------------------------------
-----------------------------------------------------------------

-- Fehler 3: Hinzufügen von inti
-- Indikator: Compileerror: Couldn't match expected type Proc mit READ_INDEX :: (Int) -> Proc
-- Behebung: Hinzufügen von intialen Parametern

-- Fehler 4: Synchronisierung nur über Read channel
-- Indikator: statische Codenalayse: Write channel fehlt
-- Behebung: wr_ri, wr_wi zu den zu synchronisierenden channels hinzugefügt

-- Fehler 5: Synchronisierung von WRITE und READ Conditions über ihre channels fehlt
-- Indikator: ASYS CHAOS assertio failed und statische Codenalayse:
--            wenn INDEX synchronisert wird, warum nicht die Buffer selber
-- Behebung: wr_ri, wr_wi zu den zu synchronisierenden channels hinzugefügt
 SYS_CON = (READ_INDEX(0) ||| WRITE_INDEX(0) ) -- Fehler 3: add parameter
 [|{| rd_ri, rd_wi, wr_ri, wr_wi |}|] -- Fehler 4: wr_ri, wr_wi added
	  ((WRITE_CON ||| READ_CON) [|{| crd,cwr |}|] CBUF) -- Fehler 5: Buffer channels synchronization added





-----------------------------------------------------------------
-- Aufbau des Ringpuffers
--
-- Fuer die unten spezifizierte Implementierung benoetigt
-- man einen Array der Laenge max+1, um einen FIFO-Puffer
-- der Kapzitaet max zu realisieren.
-----------------------------------------------------------------


--
-- Read-index
--
channel rd_ri : { 0..max } -- Kanal zum Lesen des Read-Index
channel wr_ri : { 0..max } -- Kanal zum Schreiben auf den Read-Index

-- Fehler 6: READ_INDEX führt bei einmaligen lesen von rd_ri den Prozess WRITE_INDEX aus
-- Indikator: statische Codeanalyse / Vergleich mit Kommetar zu rd_ri / wr_ri Kommentaren
-- Behebung: WRITE_INDEX wurde durch READ_INDEX ersetzt
-- Fehler 7: Falscher Parameter
-- Indikator: statische Codeanalyse: gelesener Wert wird verworfen
-- Behebung: i durch x ersetzt
READ_INDEX(i) = 
	      rd_ri!i -> READ_INDEX(i) -- Fehler 6
	      []
	      wr_ri?x -> READ_INDEX(x) -- Fehler 7

--
-- Write-Index
-- 
channel rd_wi : { 0..max } -- Kanal zum Lesen des Write-Index
channel wr_wi : { 0..max } -- Kanal zum Schreiben auf den Write-Index 

WRITE_INDEX(i) =
	      rd_wi!i -> WRITE_INDEX(i)
	      []
	      wr_wi?x -> WRITE_INDEX(x)


--
-- der Puffer selbst (Ein Array von 0..max)
-- Jede Zelle des Arrays ist ein Prozess B(i,x): i ist der
-- Index, an dem die Zelle steht, x der aktuelle Wert der Zelle.
--

channel crd : { 0..max }.DATA -- Read Channels des konkreten Puffers
channel cwr : { 0..max }.DATA -- Write Channels des konkreten Puffers

CBUF = (||| i:{ 0..max } @ CB(i,0))

CB(i,x) = crd.i!x -> CB(i,x)
          []
          cwr.i?y -> CB(i,y)  







----------------------------------------------------------------
-- Konkrete Spec des Readers
-- Lies Read/write Index. Falls =, ist nichts im Puffer.
-- Falls ungleich, lies vom aktuellen Read-Index 
-- und inkrementiere
-- ihn danach. Inkrementierung muss modulo Puffergroesse (max+1)
-- erfolgen.
----------------------------------------------------------------

-- Fehler 8: Falscher Operator, da es sich um keine Prozesse handelt
-- Indikator: Compilerfehler: Unexpected token <newline>
-- Behebung: Replicated Sequential Composition (;) durch Prefix (->) ersetzt

-- Fehler 9: Bedingung in Verzweigung semantisch falsch
-- Indikator: Vergleich der Implementierung mit der Beschreibung im Kommentar
-- Behebung: != durch == ersetzt
READ_CON = 
	 rd_ri?x -> rd_wi?y ->  -- Fehler 7: "->" war vorher ";"
	 if (x == y) 		-- Fehler 8: changed "!=" to "=="
	then READ_CON
	else
	 crd.x?z -> wr_ri!((x+1)%(max+1)) -> READ_CON
----------------------------------------------------------------
-- Konkrete Spec des Writers:
-- Lies Read/write Index. Falls 
-- (WriteIndex+1)%Puffergroesse = ReadIndex,
-- ist der Puffer voll, und es darf erst wieder
-- geschrieben werden,
-- wenn diese Situation nicht mehr vorliegt. Falls
-- (WriteIndex+1)%Puffergroesse != ReadIndex, wird an die
-- aktuelle Position des WriteIndex geschrieben und DANACH der
-- WriteIndex erhoeht.
----------------------------------------------------------------

-- Fehler 10: External Choice statt Internal Choice
-- Indikator: Die Spezifikation  WRITE_ABS schreibt ein Internal Choice vor
-- Behebung: External Choice durch Internal Choice ersetzt

-- Fehler 11: Falscher Operator, da es sich um keine Prozesse handelt
-- Indikator: Compilerfehler: Unexpected token <newline>
-- Behebung: Replicated Sequential Composition (;) durch Prefix (->) ersetzt

-- Fehler 12: Inkrementierung des Writeindex fehlt
-- Indikator: Vergleich der Implementierung mit dem Kommentar
-- Behebung: y durch (y+1) ersetzt

-- Fehler 13: Bedingung in Verzweigung syntaktisch falsch
-- Indikator: Statische Codeanalyse (= in Bedingung -> Augenkrebs)
-- Behebung: = durch == ersetzt
WRITE_CON = |~| d:DATA @ WR_CON(d) -- Fehler 10: changed to internal choice
WR_CON(d) = 
	 rd_ri?x -> rd_wi?y -> -- Fehler 11a:  ";" zu "->"
	 let wi = (y+1)%(max+1) -- Fehler 12: added y+1
	 within
		if (x == wi)  -- Fehler 13: "=" zu "==": falsches boolean
	 	then WRITE_CON
	 	else
		cwr.y!d -> wr_wi!wi -> WRITE_CON -- Fehler 11b: ";" zu "->"


----------------------------------------------------------------
-- fuer die Refinement-Bedingung wird 
-- jeder crd.i.x-event mit dem abstrakten rd.x
-- und jeder cwr.i-event mit dem abstrakten wr.x identifiziert.
----------------------------------------------------------------

SYS_CON_IDENT = 
   SYS_CON[[ crd.i <- rd, cwr.i <- wr | i <- {0..max} ]]




----------------------------------------------------------------
-- das abstrakte system muss mit CHAOS(M) verschraenkt werden,
-- wobei M alle Events enthaelt, 
-- die nur in der Implementierung vorkommen
----------------------------------------------------------------

-- Fehler 14: Bei typisierten Channels (wie rd und wr mit dem Simple Type: int) müssen eine konkrete Instanz angegeben werden
-- Indikator: Compilerfehler: Couldn't match expected type in ASYS_CHAOS (dort wird M genutzt)
-- Behebung: Hinzufügen der Pips
M = {| rd_ri,rd_wi,wr_ri,wr_wi |}  -- Fehler 14: added pipe alle auspraegungen dieser channels

ASYS_CHAOS = ASYS ||| CHAOS(M)


---------------------------------------------------------------
-- Erste Verifikationsbedingung:
-- Jede Folge von wr.x/rd.y-Ereignissen, 
-- die das konkrete System SYS_CON_IDENT
-- erzeugen kann, ist auch im abstrakten System legal
---------------------------------------------------------------

assert ASYS_CHAOS [T= SYS_CON_IDENT



---------------------------------------------------------------
-- Zweite Verifikationsbedingung:
-- Jede Folge von wr.x/rd.y-Ereignissen, 
-- die das abstrakte System 
-- ASYS erzeugen kann, ist auch im konkreten  System legal.
-- Hierzu muss man die zusaetzlich fuer die Implementierung
-- eingefuehrten Ereignisse in SYS ausblenden. Dies ergibt
-- die Prozessdefinition SYS_CON_H.
--------------------------------------------------------------

SYS_CON_H = SYS_CON_IDENT \ M

assert SYS_CON_H [T= ASYS

---- sanity checks

SIMPLE = wr.0 -> wr.1 -> rd.0 -> wr.1 -> STOP

assert SYS_CON_H [T= SIMPLE






